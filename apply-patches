#!/usr/bin/python3
#
# apply patches from spec file to git repo or unpacked tarball
#
# @author Ralf Habacker
#
import os
import re
import sys

def is_git_am_file(filename):
    with open(filename) as file:
        first_line = file.readline()
        if 'From:' in first_line:
            return True
        else:
            return False

# extract commit message from string
def git_message(s):
    s = s.replace('_', ' ').replace('-', ' ')
    # remove leading 00..
    a = s.split()
    if a[0][0] == '0':
        a[0] = ''
    s = ' '.join(a).strip()
    return s


def show_help():
    print("syntax: %s [<options>] <spec-file> [<unpacked tarball>]" % sys.argv[0])
    print("options:")
    print("    --dry-run      do not really apply, only show what will be performed")
    print("    --git          apply patches to current git repository, not to the unpacked tarball specified by second parameter")
    print("    --help         show this page")
    print("    --verbose      verbose mode")
    print("    --start <num>  continue applying with patch <num>")
    exit(1)

patches = {}
patch_order = []
patch_order_def = []
i=1
autosetup = False
autosetup_level = '-p1'
git = False
dryrun = False
verbose = False
start_key = 0

if len(sys.argv) == 1:
    show_help()

if sys.argv[i] == '--git':
    git = True
    i += 1
if sys.argv[i] == '--dry-run':
    dryrun = True
    i += 1
if sys.argv[i] == '--verbose':
    verbose = True
    i += 1

if sys.argv[i] == '--start':
    start_key = int(sys.argv[i+1])
    i += 2

if sys.argv[i] == '--help':
    show_help()

spec_filename = sys.argv[i]
src_dir = sys.argv[i+1]
dir = os.path.dirname(spec_filename)
with open(spec_filename) as file:
    if verbose:
        print('reading from "%s"' % spec_filename)
    for line in file:
        l = line.strip()
        m = re.match(r"^Patch(\w+):\s+(.*)$", l)
        if m:
            if verbose:
                print(m[1], m[2])
            patches[m[1]] = { 'file' : m[2] }
            patch_order_def.append(m[1])

        if '%autosetup' in l:
            autosetup = True
            m = re.match(r"\-p(\d)", l)
            if m:
                if verbose:
                    print(m[1])
                autosetup_level = m[1]

        m = re.match(r"^%patch(\d+)\s+(.*)$", l)
        if m:
            if verbose:
                print(m[1], m[2])
            patches[m[1]]['level'] = m[2]
            patch_order.append(m[1])
        else:
            m = re.match(r"^%patch(\d+)$", l)
            if m:
                if verbose:
                    print(m[1])
                patches[m[1]]['level'] = '-p0'
                patch_order.append(m[1])

if autosetup:
   patch_order = patch_order_def
   for key in patch_order:
       patches[key]['level'] = autosetup_level 

print(len(patch_order))

for key in patch_order:
    if start_key:
        if int(key) != start_key:
            continue
        else:
           start_key = 0
    if git:
        git_file = os.path.join(dir, patches[key]['file'])
        if is_git_am_file(git_file):
            cmdline = "git am %s" % (git_file)
        else:
            git_msg = git_message(os.path.splitext(os.path.basename(git_file))[0])
            cmdline = "patch %s -i %s; git commit -a -m \"%s\"" % (patches[key]['level'], git_file, git_msg)
    else:
        cmdline = "cd %s; patch %s -i ../%s" % (src_dir, patches[key]['level'], patches[key]['file'])
    cmdline = "echo %s; %s" % (key, cmdline)
    print(cmdline)
    if not dryrun:
        if os.system(cmdline):
            exit(1)
